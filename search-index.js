var searchIndex = new Map(JSON.parse('[["crafting_interpreter",{"t":"CCCCCCCCCCPPPPPPPGPPPPPPPPPPGPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPGPPPPPPPNNNNNNNNNNNPPFPGFPPPPPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOFNNNNNNNNNFKNNNNNNNNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNFNNNNNNNNNFNNNNNNNNNOOONNONNNPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOCCCCCCGPGPPPPPPPPPPPPPPPPPPPPGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOFGPPPPGPPPPPPPPPPPPPNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNPPPPPPPPPPPFPPPPPPPPGPNNNNNNNNNNNNNNNNNNNNNNKKMMMMMFFFFOONNNNNNNNOONNNNNNNONNNNONONNNNOOONNNNNONNNNNNNNNNNNN","n":["lox","vm","ast","error","evaluator","parser","printer","scanner","token","token_type","Assign","","Binary","Block","Call","","Class","Expr","Expression","For","Function","Get","Grouping","If","Literal","Print","Return","Set","Stmt","Unary","Var","Variable","While","accept","","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","eq","","fmt","","from","","into","","to_owned","","try_from","","try_into","","type_id","","arguments","callee","expression","left","name","","","","object","","operand","operator","","right","value","","","arguments","body","","callee","condition","","else_branch","increment","initializer","","keyword","methods","name","","","","params","then_branch","value","","DivisionByZero","DuplicateParameterName","FileNotFound","InvalidTypeConversion","IoError","LoxError","NonBooleanCondition","ParseError","ReturnOutsideFunction","RuntimeError","UndefinedVariable","UnexpectedCharacter","UnterminatedString","borrow","borrow_mut","eq","fmt","","from","into","to_string","try_from","try_into","type_id","Boolean","Class","Environment","Error","EvalResult","Evaluator","Function","Instance","NativeFunction","Nil","Number","Return","","String","Value","assign","borrow","","","","borrow_mut","","","","clone","","clone_into","","clone_to_uninit","","define","eq","","evaluate_statements","fmt","","","","from","","","","get","get_output","into","","","","merge_to_parent","new","","to_owned","","to_string","try_from","","","","try_into","","","","type_id","","","","with_enclosing","body","class","fields","methods","name","","params","Parser","borrow","borrow_mut","from","into","new","parse","try_from","try_into","type_id","AstPrinter","Visitor","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","visit_assign","","visit_binary","","visit_block","","visit_call","","visit_class","","visit_expression","","visit_for","","visit_function","","visit_get","","visit_grouping","","visit_if","","visit_literal","","visit_print","","visit_return","","visit_set","","visit_super","","visit_this","","visit_unary","","visit_var","","visit_variable","","visit_while","","Scanner","borrow","borrow_mut","from","into","new","scan_tokens","try_from","try_into","type_id","Token","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","from","into","lexeme","line","literal","new","to_owned","token_type","try_from","try_into","type_id","And","Bang","BangEqual","Boolean","Class","Comma","Dot","Else","Eof","Equal","EqualEqual","False","For","Fun","Function","Greater","GreaterEqual","Identifier","If","LeftBrace","LeftParen","Less","LessEqual","LiteralValue","Minus","Nil","","Number","","Or","Percent","Plus","Print","Return","","RightBrace","RightParen","Semicolon","Slash","Star","String","StringLit","Super","This","TokenType","True","Var","While","as_number","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","eq","","fmt","","","from","","into","","to_owned","","to_string","try_from","","try_into","","type_id","","body","name","params","ast_node","chunk","compiler","parser","traits","vm","ASTNode","BinaryExpression","BinaryOperator","Equals","","ExpressionStatement","FunctionCall","FunctionDeclaration","Grouping","IfStatement","Minus","","NumberLiteral","Plus","","Program","ReturnStatement","Slash","","Star","","StringLiteral","UnaryExpression","UnaryOperator","VariableDeclaration","VariableReference","WhileStatement","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","eq","","","fmt","","","from","","","into","","","to_owned","","","try_from","","","try_into","","","type_id","","","arguments","body","","condition","","else_branch","initializer","left","name","","","operator","","parameters","right","","then_branch","Chunk","Constant","Function","Number","OpAdd","OpCall","OpCode","OpConstant","OpDefineGlobal","OpDivide","OpGetGlobal","OpJump","OpJumpIfFalse","OpMultiply","OpNegate","OpPop","OpReturn","OpSetGlobal","OpSubtract","String","add","add_constant","borrow","","","borrow_mut","","","clone","","clone_into","","clone_to_uninit","","code","constants","divide","eq","","","equals","fmt","","","","from","","","into","","","multiply","new","patch_jump","subtract","to_owned","","to_string","try_from","","","try_into","","","type_id","","","write_jump","write_op","Compiler","borrow","borrow_mut","compile","from","into","new","try_from","try_into","type_id","Comma","EOF","Else","Equals","Function","Identifier","If","LeftBrace","LeftParen","Minus","Number","Parser","Plus","Return","RightBrace","RightParen","Semicolon","Slash","Star","String","Token","While","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","from","","into","","new","parse","to_owned","try_from","","try_into","","type_id","","ArithmeticOps","Comparable","add","divide","equals","multiply","subtract","CallFrame","Function","GlobalTable","VM","arity","base_pointer","borrow","","","","borrow_mut","","","","chunk","","clone","clone_into","clone_to_uninit","define","eq","execute","fmt","frames","from","","","","function","get","global_table","into","","","","ip","","name","new","","","","set","stack","to_owned","try_from","","","","try_into","","","","type_id","","",""],"q":[[0,"crafting_interpreter"],[2,"crafting_interpreter::lox"],[10,"crafting_interpreter::lox::ast"],[61,"crafting_interpreter::lox::ast::Expr"],[78,"crafting_interpreter::lox::ast::Stmt"],[98,"crafting_interpreter::lox::error"],[122,"crafting_interpreter::lox::evaluator"],[189,"crafting_interpreter::lox::evaluator::Value"],[196,"crafting_interpreter::lox::parser"],[206,"crafting_interpreter::lox::printer"],[258,"crafting_interpreter::lox::scanner"],[268,"crafting_interpreter::lox::token"],[287,"crafting_interpreter::lox::token_type"],[364,"crafting_interpreter::lox::token_type::LiteralValue"],[367,"crafting_interpreter::vm"],[373,"crafting_interpreter::vm::ast_node"],[439,"crafting_interpreter::vm::ast_node::ASTNode"],[456,"crafting_interpreter::vm::chunk"],[525,"crafting_interpreter::vm::compiler"],[535,"crafting_interpreter::vm::parser"],[579,"crafting_interpreter::vm::traits"],[586,"crafting_interpreter::vm::vm"],[643,"core::fmt"],[644,"core::result"],[645,"core::any"],[646,"alloc::string"],[647,"alloc::vec"],[648,"core::option"],[649,"alloc::boxed"]],"i":"``````````bj10100`0001101001`10101010101010101010101010101010F`0FbFdFfFhFjFl10Fn505G`42GbGdGf21Gh02Gj3GlGn240H`5420Aj0000`000000000000000000B`0`Bf``11111101`AnBb13201321313131130133201321001321011330132013201321HbHd0Hf202`Bn00000000``C`0000000h10101010101010101010101010101010101010101`Cj00000000`Bl00000000000000000Cl00Ch1111111111011111111`11010111110111110111`11101010101010101001010100101010Hh00```````Db`DdDf222221021022101022`222210210210210210210210210210210210210210HjHlHnI`20IbId1350If4103``Dh0Dl0`00000000000011Dj10210202020200202221022102102200202210210210200`Dn00000000E`0000000000`00000000`0Eb101111110101001010101``Ed0Ef11````EhEnElEj2310231333303131102320110231231023013102310231023","f":"`````````````````````````````````{{{d{b}}{d{fh}}}c{}}{{{d{j}}{d{fh}}}c{}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{b}}}b}{{{d{j}}}j}{{d{d{fc}}}l{}}0{{dn}l}0{{{d{b}}{d{b}}}A`}{{{d{j}}{d{j}}}A`}{{{d{b}}{d{fAb}}}Ad}{{{d{j}}{d{fAb}}}Ad}{cc{}}0{{}c{}}0{dc{}}0{c{{Af{e}}}{}{}}0{{}{{Af{c}}}{}}0{dAh}0``````````````````````````````````````````````````?>{{{d{Aj}}{d{Aj}}}A`}{{{d{Aj}}{d{fAb}}}Ad}076{dAl}543```````````````{{{d{fAn}}AlB`}{{Af{lAl}}}}{d{{d{c}}}{}}000{{{d{f}}}{{d{fc}}}{}}000{{{d{An}}}An}{{{d{B`}}}B`}{{d{d{fc}}}l{}}0{{dn}l}0{{{d{fAn}}AlB`}l}{{{d{An}}{d{An}}}A`}{{{d{B`}}{d{B`}}}A`}{{{d{fBb}}{Bd{j}}}Bf}{{{d{An}}{d{fAb}}}Ad}{{{d{B`}}{d{fAb}}}Ad}0{{{d{Bf}}{d{fAb}}}Ad}{cc{}}000{{{d{An}}{d{Bh}}}{{Bj{B`}}}}{{{d{Bb}}}Al}{{}c{}}000{{{d{fAn}}}l}{{}Bb}{{}An}{dc{}}0{dAl}{c{{Af{e}}}{}{}}000{{}{{Af{c}}}{}}000{dAh}000{AnAn}````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}>;{{{Bd{Bl}}}Bn}{{{d{fBn}}}{{Af{{Bd{j}}Aj}}}}765``32{cc{}}>{{{d{fC`}}{d{b}}}Al}987{{{d{fh}}{d{Bl}}{d{b}}}c{}}{{{d{fC`}}{d{Bl}}{d{b}}}Al}{{{d{fh}}{d{b}}{d{Bl}}{d{b}}}c{}}{{{d{fC`}}{d{b}}{d{Bl}}{d{b}}}Al}{{{d{fh}}{d{{Cb{j}}}}}c{}}{{{d{fC`}}{d{{Cb{j}}}}}Al}{{{d{fh}}{d{b}}{d{{Cb{b}}}}}c{}}{{{d{fC`}}{d{b}}{d{{Cb{b}}}}}Al}{{{d{fh}}{d{Bl}}{d{{Cb{{Cd{Blj}}}}}}}c{}}{{{d{fC`}}{d{Bl}}{d{{Cb{{Cd{Blj}}}}}}}Al}{{{d{fh}}{d{b}}}c{}};{{{d{fh}}{d{{Bj{{Cf{j}}}}}}{d{{Bj{b}}}}{d{{Bj{b}}}}{d{j}}}c{}}{{{d{fC`}}{d{{Bj{{Cf{j}}}}}}{d{{Bj{b}}}}{d{{Bj{b}}}}{d{j}}}Al}{{{d{fh}}{d{Bl}}{d{{Cb{Bl}}}}{d{{Cb{j}}}}}c{}}{{{d{fC`}}{d{Bl}}{d{{Cb{Bl}}}}{d{{Cb{j}}}}}Al}{{{d{fh}}{d{b}}{d{Bl}}}c{}}{{{d{fC`}}{d{b}}{d{Bl}}}Al}6{{{d{fC`}}{d{b}}}Al}{{{d{fh}}{d{b}}{d{j}}{d{{Bj{j}}}}}c{}}{{{d{fC`}}{d{b}}{d{j}}{d{{Bj{j}}}}}Al}{{{d{fh}}{d{Ch}}}c{}}{{{d{fC`}}{d{Ch}}}Al};4{{{d{fh}}{d{Bl}}{d{{Bj{b}}}}}c{}}{{{d{fC`}}{d{Bl}}{d{{Bj{b}}}}}Al}{{{d{fh}}{d{b}}{d{Bl}}{d{b}}}c{}}{{{d{fC`}}{d{b}}{d{Bl}}{d{b}}}Al}{{{d{fh}}{d{Bl}}{d{Bl}}}c{}}{{{d{fC`}}{d{Bl}}{d{Bl}}}Al}{{{d{fh}}{d{Bl}}}c{}}{{{d{fC`}}{d{Bl}}}Al}{{{d{fh}}{d{Bl}}{d{b}}}c{}}{{{d{fC`}}{d{Bl}}{d{b}}}Al}9832{{{d{fh}}{d{b}}{d{j}}}c{}}{{{d{fC`}}{d{b}}{d{j}}}Al}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{cc{}}{{}c{}}{{{d{Bh}}}Cj}{{{d{fCj}}}{{Af{{Bd{Bl}}Aj}}}}{c{{Af{e}}}{}{}}{{}{{Af{c}}}{}}{dAh}`87{{{d{Bl}}}Bl}{{d{d{fc}}}l{}}{{dn}l}{{{d{Bl}}{d{Bl}}}A`}{{{d{Bl}}{d{fAb}}}Ad};:```{{ClAl{Bj{Ch}}Cn}Bl}{dc{}}`987````````````````````````````````````````````````{{{d{Ch}}}{{Bj{D`}}}}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{Cl}}}Cl}{{{d{Ch}}}Ch}::99{{{d{Cl}}{d{Cl}}}A`}{{{d{Ch}}{d{Ch}}}A`}{{{d{Cl}}{d{fAb}}}Ad}{{{d{Ch}}{d{fAb}}}Ad}0{cc{}}0{{}c{}}0;;{dAl}{c{{Af{e}}}{}{}}0{{}{{Af{c}}}{}}0{dAh}0````````````````````````````````````===<<<{{{d{Db}}}Db}{{{d{Dd}}}Dd}{{{d{Df}}}Df}{{d{d{fc}}}l{}}00{{dn}l}00{{{d{Db}}{d{Db}}}A`}{{{d{Dd}}{d{Dd}}}A`}{{{d{Df}}{d{Df}}}A`}{{{d{Db}}{d{fAb}}}Ad}{{{d{Dd}}{d{fAb}}}Ad}{{{d{Df}}{d{fAb}}}Ad}{cc{}}00{{}c{}}00{dc{}}00{c{{Af{e}}}{}{}}00{{}{{Af{c}}}{}}00{dAh}00`````````````````````````````````````{{DhDh}Dh}{{{d{fDj}}Dh}Cn}{d{{d{c}}}{}}00{{{d{f}}}{{d{fc}}}{}}00{{{d{Dj}}}Dj}{{{d{Dh}}}Dh}{{d{d{fc}}}l{}}0{{dn}l}0``7{{{d{Dj}}{d{Dj}}}A`}{{{d{Dh}}{d{D`}}}A`}{{{d{Dh}}{d{Dh}}}A`}{{{d{Dh}}D`}A`}{{{d{Dl}}{d{fAb}}}Ad}{{{d{Dj}}{d{fAb}}}Ad}{{{d{Dh}}{d{fAb}}}Ad}0{cc{}}00{{}c{}}00{{DhDh}Dh}{{}Dj}{{{d{fDj}}Cn}l}2{dc{}}0{dAl}{c{{Af{e}}}{}{}}00{{}{{Af{c}}}{}}00{dAh}00{{{d{fDj}}Dl}Cn}{{{d{fDj}}Dl}l}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{fDn}}{d{Db}}}{{Af{{d{Dj}}Al}}}}>={{}Dn}876``````````````````````3322{{{d{E`}}}E`}{{d{d{fc}}}l{}}{{dn}l}{{{d{E`}}{d{E`}}}A`}{{{d{E`}}{d{fAb}}}Ad}{cc{}}0{{}c{}}0{{{Bd{E`}}}Eb}{{{d{fEb}}}{{Af{DbAl}}}}{dc{}}{c{{Af{e}}}{}{}}0{{}{{Af{c}}}{}}0{dAh}0``{{EdEd}Ed}0{{{d{Ef}}D`}A`}11``````{d{{d{c}}}{}}000{{{d{f}}}{{d{fc}}}{}}000``{{{d{Eh}}}Eh}{{d{d{fc}}}l{}}{{dn}l}{{{d{fEj}}CnDh}{{Af{l{d{Bh}}}}}}{{{d{Eh}}{d{Eh}}}A`}{{{d{fEl}}}l}{{{d{Eh}}{d{fAb}}}Ad}`{cc{}}000`{{{d{Ej}}Cn}{{Bj{{d{Dh}}}}}}`{{}c{}}000```{DjEl}{{}Ej}{{EhCn}En}{{{d{Bh}}DjCn}Eh}{{{d{fEj}}CnDh}l}`{dc{}}{c{{Af{e}}}{}{}}000{{}{{Af{c}}}{}}000{dAh}000","D":"AGf","p":[[6,"Expr",10],[1,"reference",null,null,1],[0,"mut"],[10,"Visitor",206],[6,"Stmt",10],[1,"unit"],[1,"u8"],[1,"bool"],[5,"Formatter",643],[8,"Result",643],[6,"Result",644,null,1],[5,"TypeId",645],[6,"LoxError",98],[5,"String",646],[5,"Environment",122],[6,"Value",122],[5,"Evaluator",122],[5,"Vec",647],[6,"EvalResult",122],[1,"str"],[6,"Option",648,null,1],[5,"Token",268],[5,"Parser",196],[5,"AstPrinter",206],[1,"slice"],[1,"tuple",null,null,1],[5,"Box",649,null,1],[6,"LiteralValue",287],[5,"Scanner",258],[6,"TokenType",287],[1,"usize"],[1,"f64"],[6,"ASTNode",373],[6,"BinaryOperator",373],[6,"UnaryOperator",373],[6,"Constant",456],[5,"Chunk",456],[6,"OpCode",456],[5,"Compiler",525],[6,"Token",535],[5,"Parser",535],[10,"ArithmeticOps",579],[10,"Comparable",579],[5,"Function",586],[5,"GlobalTable",586],[5,"VM",586],[5,"CallFrame",586],[15,"Call",61],[15,"Grouping",61],[15,"Binary",61],[15,"Variable",61],[15,"Assign",61],[15,"Get",61],[15,"Set",61],[15,"Unary",61],[15,"Literal",61],[15,"Call",78],[15,"For",78],[15,"Function",78],[15,"If",78],[15,"Var",78],[15,"Return",78],[15,"Class",78],[15,"Assign",78],[15,"Function",189],[15,"Instance",189],[15,"Class",189],[15,"Function",364],[15,"FunctionCall",439],[15,"WhileStatement",439],[15,"FunctionDeclaration",439],[15,"IfStatement",439],[15,"VariableDeclaration",439],[15,"BinaryExpression",439],[15,"UnaryExpression",439]],"r":[],"b":[[114,"impl-Display-for-LoxError"],[115,"impl-Debug-for-LoxError"],[157,"impl-Debug-for-Value"],[158,"impl-Display-for-Value"],[349,"impl-Display-for-LiteralValue"],[350,"impl-Debug-for-LiteralValue"],[494,"impl-PartialEq%3Cf64%3E-for-Constant"],[495,"impl-PartialEq-for-Constant"],[499,"impl-Debug-for-Constant"],[500,"impl-Display-for-Constant"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAMgBHQAAADEANgAsAHAAAgB0AAAAdwASAIsADQCaAAEAnQADAK4ADgC+AAYAxgABAMwAAgDRAAEA1gACAAQBAQAKAQIADgEGABsBAAAdAQIAUQEOAGQBCABwATUArAFJAPwBFQAUAiIAOwIPAE4CFABnAgIAbgIVAA==","P":[[33,"R"],[35,"T"],[39,""],[41,"T"],[43,""],[49,"T"],[51,"U"],[53,"T"],[55,"U,T"],[57,"U"],[59,""],[111,"T"],[113,""],[116,"T"],[117,"U"],[118,""],[119,"U,T"],[120,"U"],[121,""],[138,"T"],[146,""],[148,"T"],[150,""],[160,"T"],[164,""],[166,"U"],[170,""],[173,"T"],[175,""],[176,"U,T"],[180,"U"],[184,""],[197,"T"],[200,"U"],[201,""],[203,"U,T"],[204,"U"],[205,""],[208,"T"],[211,"U"],[212,""],[213,"U,T"],[214,"U"],[215,""],[216,"R"],[217,""],[218,"R"],[219,""],[220,"R"],[221,""],[222,"R"],[223,""],[224,"R"],[225,""],[226,"R"],[227,""],[228,"R"],[229,""],[230,"R"],[231,""],[232,"R"],[233,""],[234,"R"],[235,""],[236,"R"],[237,""],[238,"R"],[239,""],[240,"R"],[241,""],[242,"R"],[243,""],[244,"R"],[245,""],[246,"R"],[247,""],[248,"R"],[249,""],[250,"R"],[251,""],[252,"R"],[253,""],[254,"R"],[255,""],[256,"R"],[257,""],[259,"T"],[262,"U"],[263,""],[265,"U,T"],[266,"U"],[267,""],[269,"T"],[271,""],[272,"T"],[273,""],[276,"T"],[277,"U"],[281,""],[282,"T"],[284,"U,T"],[285,"U"],[286,""],[336,"T"],[340,""],[342,"T"],[344,""],[351,"T"],[353,"U"],[355,"T"],[357,""],[358,"U,T"],[360,"U"],[362,""],[400,"T"],[406,""],[409,"T"],[412,""],[421,"T"],[424,"U"],[427,"T"],[430,"U,T"],[433,"U"],[436,""],[478,"T"],[484,""],[486,"T"],[488,""],[501,"T"],[504,"U"],[507,""],[511,"T"],[513,""],[514,"U,T"],[517,"U"],[520,""],[526,"T"],[528,""],[529,"T"],[530,"U"],[531,""],[532,"U,T"],[533,"U"],[534,""],[557,"T"],[561,""],[562,"T"],[563,""],[566,"T"],[568,"U"],[570,""],[572,"T"],[573,"U,T"],[575,"U"],[577,""],[592,"T"],[602,""],[603,"T"],[604,""],[610,"T"],[615,""],[617,"U"],[624,""],[630,"T"],[631,"U,T"],[635,"U"],[639,""]]}],["vm_interpreter",{"t":"HH","n":["main","tokenize"],"q":[[0,"vm_interpreter"],[2,"alloc::string"],[3,"crafting_interpreter::vm::parser"],[4,"alloc::vec"]],"i":"``","f":"{{}b}{d{{h{f}}}}","D":"`","p":[[1,"unit"],[5,"String",2],[6,"Token",3],[5,"Vec",4]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAIAEAAAAAAAAQACAA==","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[15217,334]}